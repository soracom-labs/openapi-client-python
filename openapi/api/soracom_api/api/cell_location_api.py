"""
    SORACOM API

    SORACOM API v1  # noqa: E501

    The version of the OpenAPI document: VERSION_PLACEHOLDER
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from soracom_api.api_client import ApiClient, Endpoint as _Endpoint
from soracom_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from soracom_api.model.cell_identifier import CellIdentifier
from soracom_api.model.cell_location import CellLocation


class CellLocationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.batch_get_cell_locations_endpoint = _Endpoint(
            settings={
                'response_type': ([CellLocation],),
                'auth': [
                    'api_key',
                    'api_token'
                ],
                'endpoint_path': '/cell_locations',
                'operation_id': 'batch_get_cell_locations',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cell_identifier',
                ],
                'required': [
                    'cell_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cell_identifier':
                        ([CellIdentifier],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cell_identifier': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_cell_location_endpoint = _Endpoint(
            settings={
                'response_type': (CellLocation,),
                'auth': [
                    'api_key',
                    'api_token'
                ],
                'endpoint_path': '/cell_locations',
                'operation_id': 'get_cell_location',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mcc',
                    'mnc',
                    'lac',
                    'cid',
                    'tac',
                    'ecid',
                    'eci',
                ],
                'required': [
                    'mcc',
                    'mnc',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mcc':
                        (str,),
                    'mnc':
                        (str,),
                    'lac':
                        (str,),
                    'cid':
                        (str,),
                    'tac':
                        (str,),
                    'ecid':
                        (str,),
                    'eci':
                        (str,),
                },
                'attribute_map': {
                    'mcc': 'mcc',
                    'mnc': 'mnc',
                    'lac': 'lac',
                    'cid': 'cid',
                    'tac': 'tac',
                    'ecid': 'ecid',
                    'eci': 'eci',
                },
                'location_map': {
                    'mcc': 'query',
                    'mnc': 'query',
                    'lac': 'query',
                    'cid': 'query',
                    'tac': 'query',
                    'ecid': 'query',
                    'eci': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def batch_get_cell_locations(
        self,
        cell_identifier,
        **kwargs
    ):
        """List location information for multiple cell towers.  # noqa: E501

        Retrieves a list of location information (latitude / longitude) for multiple cell towers which are identified by Cell IDs etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_get_cell_locations(cell_identifier, async_req=True)
        >>> result = thread.get()

        Args:
            cell_identifier ([CellIdentifier]): List of cell identifiers.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CellLocation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cell_identifier'] = \
            cell_identifier
        return self.batch_get_cell_locations_endpoint.call_with_http_info(**kwargs)

    def get_cell_location(
        self,
        mcc,
        mnc,
        **kwargs
    ):
        """Get location information for a cell tower.  # noqa: E501

        Retrieves location information (latitude / longitude) for a cell tower which is identified by Cell ID etc. Please specify MCC, MNC, LAC and CID when the access radio technology is 3G. It is possible to retrieve location information without CID, but the location information will be low accuracy.  For LTE (4G), please specify MCC, MNC, TAC and ECID. As it is based on an open database to convert cell information into location information, the location information does not exist or might be incorrect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_location(mcc, mnc, async_req=True)
        >>> result = thread.get()

        Args:
            mcc (str): MCC - Mobile Country Code
            mnc (str): MNC - Mobile Network Code

        Keyword Args:
            lac (str): LAC - Location Area Code (for 3G). [optional]
            cid (str): CID - Cell ID (for 3G). [optional]
            tac (str): TAC - Tracking Area Code (for 4G). [optional]
            ecid (str): ECID - Enhanced Cell ID (for 4G) - specify either `ecid` or `eci`. [optional]
            eci (str): ECID - Enhanced Cell ID (for 4G) - specify either `ecid` or `eci`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CellLocation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['mcc'] = \
            mcc
        kwargs['mnc'] = \
            mnc
        return self.get_cell_location_endpoint.call_with_http_info(**kwargs)

