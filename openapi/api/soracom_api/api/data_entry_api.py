"""
    SORACOM API

    SORACOM API v1  # noqa: E501

    The version of the OpenAPI document: VERSION_PLACEHOLDER
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from soracom_api.api_client import ApiClient, Endpoint as _Endpoint
from soracom_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from soracom_api.model.data_entry import DataEntry
from soracom_api.model.data_source_resource_metadata import DataSourceResourceMetadata


class DataEntryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_data_entry_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'api_key',
                    'api_token'
                ],
                'endpoint_path': '/data/{resource_type}/{resource_id}/{time}',
                'operation_id': 'delete_data_entry',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'resource_type',
                    'resource_id',
                    'time',
                ],
                'required': [
                    'resource_type',
                    'resource_id',
                    'time',
                ],
                'nullable': [
                ],
                'enum': [
                    'resource_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('resource_type',): {

                        "SUBSCRIBER": "Subscriber",
                        "LORADEVICE": "LoraDevice",
                        "SUBSCRIBERIDENTITYMODULE": "SubscriberIdentityModule",
                        "SIGFOXDEVICE": "SigfoxDevice",
                        "DEVICE": "Device"
                    },
                },
                'openapi_types': {
                    'resource_type':
                        (str,),
                    'resource_id':
                        (str,),
                    'time':
                        (int,),
                },
                'attribute_map': {
                    'resource_type': 'resource_type',
                    'resource_id': 'resource_id',
                    'time': 'time',
                },
                'location_map': {
                    'resource_type': 'path',
                    'resource_id': 'path',
                    'time': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_data_entries_endpoint = _Endpoint(
            settings={
                'response_type': ([DataEntry],),
                'auth': [
                    'api_key',
                    'api_token'
                ],
                'endpoint_path': '/data/{resource_type}/{resource_id}',
                'operation_id': 'get_data_entries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'resource_type',
                    'resource_id',
                    '_from',
                    'to',
                    'sort',
                    'limit',
                    'last_evaluated_key',
                ],
                'required': [
                    'resource_type',
                    'resource_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'resource_type',
                    'sort',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('resource_type',): {

                        "SUBSCRIBER": "Subscriber",
                        "LORADEVICE": "LoraDevice",
                        "SUBSCRIBERIDENTITYMODULE": "SubscriberIdentityModule",
                        "SIGFOXDEVICE": "SigfoxDevice",
                        "DEVICE": "Device"
                    },
                    ('sort',): {

                        "DESC": "desc",
                        "ASC": "asc"
                    },
                },
                'openapi_types': {
                    'resource_type':
                        (str,),
                    'resource_id':
                        (str,),
                    '_from':
                        (int,),
                    'to':
                        (int,),
                    'sort':
                        (str,),
                    'limit':
                        (int,),
                    'last_evaluated_key':
                        (str,),
                },
                'attribute_map': {
                    'resource_type': 'resource_type',
                    'resource_id': 'resource_id',
                    '_from': 'from',
                    'to': 'to',
                    'sort': 'sort',
                    'limit': 'limit',
                    'last_evaluated_key': 'last_evaluated_key',
                },
                'location_map': {
                    'resource_type': 'path',
                    'resource_id': 'path',
                    '_from': 'query',
                    'to': 'query',
                    'sort': 'query',
                    'limit': 'query',
                    'last_evaluated_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_data_entry_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'api_key',
                    'api_token'
                ],
                'endpoint_path': '/data/{resource_type}/{resource_id}/{time}',
                'operation_id': 'get_data_entry',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'resource_type',
                    'resource_id',
                    'time',
                ],
                'required': [
                    'resource_type',
                    'resource_id',
                    'time',
                ],
                'nullable': [
                ],
                'enum': [
                    'resource_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('resource_type',): {

                        "SUBSCRIBER": "Subscriber",
                        "LORADEVICE": "LoraDevice",
                        "SUBSCRIBERIDENTITYMODULE": "SubscriberIdentityModule",
                        "SIGFOXDEVICE": "SigfoxDevice",
                        "DEVICE": "Device"
                    },
                },
                'openapi_types': {
                    'resource_type':
                        (str,),
                    'resource_id':
                        (str,),
                    'time':
                        (int,),
                },
                'attribute_map': {
                    'resource_type': 'resource_type',
                    'resource_id': 'resource_id',
                    'time': 'time',
                },
                'location_map': {
                    'resource_type': 'path',
                    'resource_id': 'path',
                    'time': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_data_source_resources_endpoint = _Endpoint(
            settings={
                'response_type': ([DataSourceResourceMetadata],),
                'auth': [
                    'api_key',
                    'api_token'
                ],
                'endpoint_path': '/data/resources',
                'operation_id': 'list_data_source_resources',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'resource_type',
                    'limit',
                    'last_evaluated_key',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'resource_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('resource_type',): {

                        "SUBSCRIBER": "Subscriber",
                        "LORADEVICE": "LoraDevice",
                        "SUBSCRIBERIDENTITYMODULE": "SubscriberIdentityModule",
                        "SIGFOXDEVICE": "SigfoxDevice",
                        "DEVICE": "Device"
                    },
                },
                'openapi_types': {
                    'resource_type':
                        (str,),
                    'limit':
                        (int,),
                    'last_evaluated_key':
                        (str,),
                },
                'attribute_map': {
                    'resource_type': 'resource_type',
                    'limit': 'limit',
                    'last_evaluated_key': 'last_evaluated_key',
                },
                'location_map': {
                    'resource_type': 'query',
                    'limit': 'query',
                    'last_evaluated_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def delete_data_entry(
        self,
        resource_type,
        resource_id,
        time,
        **kwargs
    ):
        """Deletes a data entry  # noqa: E501

        Deletes a data entry identified with resource ID and timestamp  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_data_entry(resource_type, resource_id, time, async_req=True)
        >>> result = thread.get()

        Args:
            resource_type (str): Type of data source resource
            resource_id (str): ID of data source resource
            time (int): Timestamp of the target data entry to delete (unixtime in milliseconds).

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['resource_type'] = \
            resource_type
        kwargs['resource_id'] = \
            resource_id
        kwargs['time'] = \
            time
        return self.delete_data_entry_endpoint.call_with_http_info(**kwargs)

    def get_data_entries(
        self,
        resource_type,
        resource_id,
        **kwargs
    ):
        """Get data sent from a resource.  # noqa: E501

        Returns a list of data entries sent from a resource that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_data_entries(resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        Args:
            resource_type (str): Type of data source resource
            resource_id (str): ID of data source resource

        Keyword Args:
            _from (int): Start time for the data entries search range (unixtime in milliseconds).. [optional]
            to (int): End time for the data entries search range (unixtime in milliseconds).. [optional]
            sort (str): Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).. [optional] if omitted the server will use the default value of "desc"
            limit (int): Maximum number of data entries to retrieve.. [optional]
            last_evaluated_key (str): The value of `time` in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [DataEntry]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['resource_type'] = \
            resource_type
        kwargs['resource_id'] = \
            resource_id
        return self.get_data_entries_endpoint.call_with_http_info(**kwargs)

    def get_data_entry(
        self,
        resource_type,
        resource_id,
        time,
        **kwargs
    ):
        """Gets a data entry  # noqa: E501

        Gets a data entry identified with resource ID and timestamp  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_data_entry(resource_type, resource_id, time, async_req=True)
        >>> result = thread.get()

        Args:
            resource_type (str): Type of data source resource
            resource_id (str): ID of data source resource
            time (int): Timestamp of the target data entry to get (unixtime in milliseconds).

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['resource_type'] = \
            resource_type
        kwargs['resource_id'] = \
            resource_id
        kwargs['time'] = \
            time
        return self.get_data_entry_endpoint.call_with_http_info(**kwargs)

    def list_data_source_resources(
        self,
        **kwargs
    ):
        """Get the list of data source resources  # noqa: E501

        Returns a list of data source resources that have sent data from resources that belong to the operator. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_data_source_resources(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            resource_type (str): Type of data source resource. [optional]
            limit (int): Maximum number of data entries to retrieve.. [optional]
            last_evaluated_key (str): The value of `resourceId` in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [DataSourceResourceMetadata]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_data_source_resources_endpoint.call_with_http_info(**kwargs)

